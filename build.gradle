import groovy.io.FileType

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

group = 'com.thegamecommunity'
version = "${project.version}"

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://libraries.minecraft.net"
        }
    }
}

repositories {
    maven {
        url "https://libraries.minecraft.net"
    }
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    testImplementation libs.guava.core
    testImplementation libs.junit
    testImplementation libs.hamcrest
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit
    testImplementation libs.guava.testlib
    testImplementation libs.jmh.core
    annotationProcessor libs.jmh.generator
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
    from sourceSets.test.allSource
}
build.dependsOn(sourcesJar)

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

test {
    testLogging {
        events "failed", "skipped"
        showStandardStreams = true
        showExceptions true
    }
}

ext.mavenLocalUrl = repositories.mavenLocal().url.toString()

jar {
	manifest {
		attributes(
			'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
			'MixinConfigs': 'mixins.json',
			'Main-Class': 'net.fabricmc.loader.impl.launch.knot.KnotClient',
			'Specification-Version': 8.0,
			'Multi-Release': 'true'
		)
	}
}

tasks.register('checkArtifactExists') {
    doLast {
    
    	if (project.hasProperty('force')) {
			logger.lifecycle("Skipping artifact existence check due to --force flag.")
			return
		}
		
        def repoUrl = project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl
        def artifactPath = "${repoUrl}/${project.group.replace('.', '/')}/${project.archivesBaseName}/${project.version}/${project.archivesBaseName}-${project.version}.jar"
        logger.lifecycle("Checking if artifact exists at: $artifactPath")
        
        if (artifactPath.startsWith('file:/')) {
            // Handle file URLs
            def file = new File(new URI(artifactPath))
            if (file.exists()) {
                throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        } else {
            // Handle HTTP URLs
            def url = new URL(artifactPath)
            def connection = url.openConnection()
            connection.setRequestMethod('HEAD')
            if (connection.responseCode == 200) {
				throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        }
        logger.lifecycle("Artifact does not exist, proceeding with publish.")
    }
}

tasks.named('publish') {
    dependsOn 'checkArtifactExists'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            // Attach sources JAR to the publication
            artifact sourcesJar
        }
    }

    repositories {
        maven {
            url = uri(project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl) // Default to mavenLocal if no custom URL is provided
        }
    }
}